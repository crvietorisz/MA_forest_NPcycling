library(ggfortify)
########################### Make full model ####################################
mod.full <- glmmTMB((Nitrification+0.01) ~ litter_depth + denitrification_ECbac_abund + med_dist_expl + bac_shannon + Ferns + Nitrifier_abundance + pH + Copiotroph_abundance + num_stems + bac_nitr_pos_module_abundance,
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
summary(mod.full)
performance::r2(mod.full) # R2 = 0.641
AIC(mod.full) # 39.15
########################### Model selection rounds ####################################
######## ROUND 1 ###########
vars_sel_1 <- c(
"litter_depth",
"denitrification_ECbac_abund",
"med_dist_expl",
"bac_shannon",
"Ferns",
"Nitrifier_abundance",
"pH",
"Copiotroph_abundance",
"num_stems",
"bac_nitr_pos_module_abundance"
)
# create a dataframe to hold the AIC info
aic_df_1 <- data.frame(
Model = character(length(vars_sel_1)),
AIC = numeric(length(vars_sel_1)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_1)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_1[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_1$Model[i] <- paste("Model without", vars_sel_1[i])
aic_df_1$AIC[i] <- AIC(model)
}
# REMOVING PH
######## ROUND 2 ###########
vars_sel_2 <- c(
"litter_depth",
"denitrification_ECbac_abund",
"med_dist_expl",
"bac_shannon",
"Ferns",
"Nitrifier_abundance",
"Copiotroph_abundance",
"num_stems",
"bac_nitr_pos_module_abundance"
)
# create a dataframe to hold the AIC info
aic_df_2 <- data.frame(
Model = character(length(vars_sel_2)),
AIC = numeric(length(vars_sel_2)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_2)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_2[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_2$Model[i] <- paste("Model without", vars_sel_2[i])
aic_df_2$AIC[i] <- AIC(model)
}
# REMOVING DENITRIFICATION EC ABUND
######## ROUND 3 ###########
vars_sel_3 <- c(
"litter_depth",
"med_dist_expl",
"bac_shannon",
"Ferns",
"Nitrifier_abundance",
"Copiotroph_abundance",
"num_stems",
"bac_nitr_pos_module_abundance"
)
# create a dataframe to hold the AIC info
aic_df_3 <- data.frame(
Model = character(length(vars_sel_3)),
AIC = numeric(length(vars_sel_3)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_3)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_3[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_3$Model[i] <- paste("Model without", vars_sel_3[i])
aic_df_3$AIC[i] <- AIC(model)
}
# REMOVING NITRIFIER ABUND
######## ROUND 4 ###########
vars_sel_4 <- c(
"litter_depth",
"med_dist_expl",
"bac_shannon",
"Ferns",
"Copiotroph_abundance",
"num_stems",
"bac_nitr_pos_module_abundance"
)
# create a dataframe to hold the AIC info
aic_df_4 <- data.frame(
Model = character(length(vars_sel_4)),
AIC = numeric(length(vars_sel_4)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_4)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_4[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_4$Model[i] <- paste("Model without", vars_sel_4[i])
aic_df_4$AIC[i] <- AIC(model)
}
# REMOVING BAC MODULE ABUNDANCE
######## ROUND 5 ###########
vars_sel_5 <- c(
"litter_depth",
"med_dist_expl",
"bac_shannon",
"Ferns",
"Copiotroph_abundance",
"num_stems"
)
# create a dataframe to hold the AIC info
aic_df_5 <- data.frame(
Model = character(length(vars_sel_5)),
AIC = numeric(length(vars_sel_5)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_5)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_5[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_5$Model[i] <- paste("Model without", vars_sel_5[i])
aic_df_5$AIC[i] <- AIC(model)
}
# REMOVING NUM STEMS
######## ROUND 6 ###########
vars_sel_6 <- c(
"litter_depth",
"med_dist_expl",
"bac_shannon",
"Ferns",
"Copiotroph_abundance"
)
# create a dataframe to hold the AIC info
aic_df_6 <- data.frame(
Model = character(length(vars_sel_6)),
AIC = numeric(length(vars_sel_6)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_6)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_6[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_6$Model[i] <- paste("Model without", vars_sel_6[i])
aic_df_6$AIC[i] <- AIC(model)
}
# AIC STARTS GOING UP HERE
# REMOVING LITTER DEPTH
######## ROUND 7 ###########
vars_sel_7 <- c(
"med_dist_expl",
"bac_shannon",
"Ferns",
"Copiotroph_abundance"
)
# create a dataframe to hold the AIC info
aic_df_7 <- data.frame(
Model = character(length(vars_sel_7)),
AIC = numeric(length(vars_sel_7)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_7)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_7[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_7$Model[i] <- paste("Model without", vars_sel_7[i])
aic_df_7$AIC[i] <- AIC(model)
}
# AIC GOES WAY UP THIS ROUND
# REMOVING BAC SHANNON
######## ROUND 8 ###########
vars_sel_8 <- c(
"med_dist_expl",
"Ferns",
"Copiotroph_abundance"
)
# create a dataframe to hold the AIC info
aic_df_8 <- data.frame(
Model = character(length(vars_sel_8)),
AIC = numeric(length(vars_sel_8)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_8)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_8[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_8$Model[i] <- paste("Model without", vars_sel_8[i])
aic_df_8$AIC[i] <- AIC(model)
}
# AIC GOES WAY UP AGAIN
# REMOVING FERNS
######## ROUND 9 ###########
vars_sel_9 <- c(
"med_dist_expl",
"Copiotroph_abundance"
)
# create a dataframe to hold the AIC info
aic_df_9 <- data.frame(
Model = character(length(vars_sel_9)),
AIC = numeric(length(vars_sel_9)),
stringsAsFactors = FALSE
)
# set response variable
response <- "(Nitrification+0.01)"
# run for loop that drops one variable at a time and records the AIC for each model
for (i in 1:length(vars_sel_9)) {
# Select predictors excluding the i-th predictor
current_predictors <- vars_sel_9[-i]
# Create the formula for the model
formula_str <- paste(response, "~", paste(current_predictors, collapse = " + "))
# Fit the linear model
model <- glmmTMB(as.formula(formula_str),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
# Put AIC of each model into df
aic_df_9$Model[i] <- paste("Model without", vars_sel_9[i])
aic_df_9$AIC[i] <- AIC(model)
}
# AIC GOES WAY UP AGAIN
# YAY WE ARE DONE!! so fun
View(aic_df_1)
View(aic_df_2)
View(aic_df_3)
View(aic_df_4)
View(aic_df_5)
install.packages("performance", version = "0.10.5.4")
install.packages("performance", version = "0.10.5.4")
MuMIn::r.squaredGLMM(mod.final) # R2 = 0.646
# Pick the model from all rounds with the lowest AIC
# lowest AIC model is from round 5
mod.final <- glmmTMB((Nitrification+0.01) ~  litter_depth + Ferns + med_dist_expl + Copiotroph_abundance + bac_shannon,
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
summary(mod.final)
AIC(mod.final) # 27.25
MuMIn::r.squaredGLMM(mod.final) # R2 = 0.646
View(aic_df_2)
# Stats
EMF.amm <- lmer(sqrt(Ammonification) ~ ECM_abundance + (1|Site), data = sub_dist)
library(lme4)
library(MuMIn)
library(ggplot2)
library(tidyverse)
library(glmmTMB)
library(DHARMa)
# Stats
EMF.amm <- lmer(sqrt(Ammonification) ~ ECM_abundance + (1|Site), data = sub_dist)
summary(EMF.amm)
pt(q=3.642, df=length(na.omit(sub_dist$Ammonification)-2), lower.tail=FALSE) #get p value - MUST INPUT T STAT!
MuMIn::r.squaredGLMM(EMF.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
# Stats
copios.nitrif <- glmmTMB((Nitrification+0.01) ~ Copiotroph_abundance + (1|Site),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
summary(copios.nitrif)
performance::r2(copios.nitrif) # p = 2e-12, R2m = 0.34
MuMIn::r.squaredGLMM(copios.nitrif)
# Stats
copios.nitrif <- glmmTMB((Nitrification+0.01) ~ Copiotroph_abundance + (1|Site),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
summary(copios.nitrif)
performance::r2(copios.nitrif) # p = 2e-12
performance::r2(mod.final)
performance::r2(copios.nitrif) # p = 2e-12
MuMIn::r.squaredGLMM(copios.nitrif) # R2m lognormal = 0.48
# Stats
nitrifiers.nitrif <- glmmTMB((Nitrification+1) ~ Nitrifier_abundance + (1|Site),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
summary(nitrifiers.nitrif)
performance::r2(nitrifiers.nitrif) # p = 3e-4, R2m = 0.11
MuMIn::r.squaredGLMM(copios.nitrif) # R2m (lognormal) = 0.48
MuMIn::r.squaredGLMM(nitrifiers.nitrif) # R2m (lognormal) = 0.48
# Stats
bacmodule.nitrif <- glmmTMB((Nitrification+0.01) ~ bac_nitr_pos_module_abundance + (1|Site),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
summary(bacmodule.nitrif)
performance::r2(bacmodule.nitrif) # p = 1e-05, R2m = 0.08
MuMIn::r.squaredGLMM(nitrifiers.nitrif) # R2m (lognormal) = 0.12
MuMIn::r.squaredGLMM(bacmodule.nitrif) # R2m (lognormal) = 0.12
# use the DHARMa package to test if the data is zero inflated (to confirm that a zero-inflated model is appropriate)
mod.res<- simulateResiduals(bacmodule.nitrif)
testZeroInflation(bacmodule.nitrif)
sum(!is.na(sub_dist$Ammonification) & !is.na(sub_dist$ECM_abundance))
# Stats
EMF.amm <- lmer(sqrt(Ammonification) ~ ECM_abundance + (1|Site), data = sub_dist)
summary(EMF.amm)
library(lmerTest)
anova(EMF.amm)
lmerTest::anova(EMF.amm)
summary(EMF.amm)
car::Anova(EMF.amm)
anova(EMF.amm)
# Stats
EMF.amm <- lmer(sqrt(Ammonification) ~ ECM_abundance + (1|Site), data = sub_dist)
anova(EMF.amm)
summary(EMF.amm)
EMF.amm$assign
anova(
EMF.amm,
type = 1,
ddf = c("lme4")
)
lmerTest::anova(
EMF.amm,
type = 1,
ddf = c("lme4")
)
anova(
EMF.amm,
type = 2,
ddf = c("lme4")
)
anova(
EMF.amm,
type = 3,
ddf = c("lme4")
)
anova(
EMF.amm,
type = ,
ddf = "lme4"
)
anova(
EMF.amm,
type = ,
ddf = "Satterthwaite"
)
pt(q=3.642, df=length(na.omit(sub_dist$Ammonification)-2), lower.tail=FALSE) #get p value - MUST INPUT T STAT!
# Stats
funICM.amm <- lmer(sqrt(Ammonification) ~ fun_amm_pos_module_abundance + (1|Site), data = sub_dist)
summary(funICM.amm)
anova(EMF.amm, type = , ddf = "Satterthwaite") # p = 0.0004, F = 13.3, numDF = 1, denDF = 109
# Stats
EMF.amm <- lmer(sqrt(Ammonification) ~ ECM_abundance + (1|Site), data = sub_dist)
summary(EMF.amm)
# Stats
funICM.amm <- lmer(sqrt(Ammonification) ~ fun_amm_pos_module_abundance + (1|Site), data = sub_dist)
summary(funICM.amm)
anova(funICM.amm, type = , ddf = "Satterthwaite") # p = 0.0004, F = 13.3, numDF = 1, denDF = 109
MuMIn::r.squaredGLMM(EMF.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
anova(funICM.amm, type = , ddf = "Satterthwaite") # p = 0.0006, F = 13.3, numDF = 1, denDF = 109
# All bacterial chitinases
chitinaseEC.amm <- lmer(sqrt(Ammonification) ~ sqrt(chitinase_ECbac_abund) + (1|Site), data = sub_dist)
summary(chitinaseEC.amm)
anova(chitinaseEC.amm, type = , ddf = "Satterthwaite") # p = 0.0006, F = 12.5, numDF = 1, denDF = 109
# All bacterial chitinases
chitinaseEC.amm <- lmer(sqrt(Ammonification) ~ sqrt(chitinase_ECbac_abund) + (1|Site), data = sub_dist)
summary(chitinaseEC.amm)
anova(chitinaseEC.amm, ddf = "Satterthwaite") # p = 7e-07, F = 33.9, numDF = 1, denDF = 43
MuMIn::r.squaredGLMM(chitinaseEC.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
# All bacterial glycosidases (hydrolysing O- and S- glycosyl compounds)
glycosOS.EC.amm <- lmer(sqrt(Ammonification) ~ sqrt(glycosidaseOS_EC_abund) + (1|Site), data = sub_dist)
# All bacterial glycosidases (hydrolysing O- and S- glycosyl compounds)
glycosOS.EC.amm <- lmer(sqrt(Ammonification) ~ sqrt(glycosidaseOS_ECbac_abund) + (1|Site), data = sub_dist)
summary(glycosOS.EC.amm)
anova(chitinaseEC.amm, ddf = "Satterthwaite") # p = 7e-07, F = 33.9, numDF = 1, denDF = 43
anova(glycosOS.EC.amm, ddf = "Satterthwaite") # p = 7e-07, F = 33.9, numDF = 1, denDF = 43
MuMIn::r.squaredGLMM(glycosOS.EC.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
# Oligotrophic bacterial glycosidases (hydrolysing O- and S- glycosyl compounds)
olig.glycosOS.EC.amm <- lmer(sqrt(Ammonification) ~ sqrt(Oligotroph_glycosidaseOS_ECbac) + (1|Site), data = sub_dist)
summary(olig.glycosOS.EC.amm)
anova(olig.glycosOS.EC.amm, ddf = "Satterthwaite") # p = 3e-06, F = 31, numDF = 1, denDF = 35
anova(glycosOS.EC.amm, ddf = "Satterthwaite") # p = 3e-06, F = 31, numDF = 1, denDF = 35
anova(olig.glycosOS.EC.amm, ddf = "Satterthwaite") # p = 0.0002, F = 14.7, numDF = 1, denDF = 35
MuMIn::r.squaredGLMM(olig.glycosOS.EC.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
MuMIn::r.squaredGLMM(olig.chitinaseEC.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
# Oligotrophic bacterial chitinases
olig.chitinaseEC.amm <- lmer(sqrt(Ammonification) ~ sqrt(Oligotroph_chitinase_ECbac) + (1|Site), data = sub_dist)
summary(olig.chitinaseEC.amm)
summary(olig.chitinaseEC.amm)
anova(olig.chitinaseEC.amm, ddf = "Satterthwaite") # p = 0.0002, F = 14.7, numDF = 1, denDF = 115
MuMIn::r.squaredGLMM(olig.chitinaseEC.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
# Stats
copios.nitrif <- glmmTMB((Nitrification+0.01) ~ Copiotroph_abundance + (1|Site),
data = sub_dist,
ziformula = ~ 1,
family = Gamma(link = "log"))
summary(copios.nitrif) # p = 2e-12
performance::r2(copios.nitrif)
MuMIn::r.squaredGLMM(copios.nitrif) # R2m (lognormal) = 0.48
anova(copios.nitrif)
summary(copios.nitrif) # p = 2e-12
anova(copios.nitrif, ddf = "Satterthwaite")
library(MASS)
MASS::glmmPQL(copios.nitrif)
MASS::glmmPQL(copios.nitrif, family = Gamma(link = "log"))
car::Anova(copios.nitrif, test.statistic = "F")
anova(
copios.nitrif,
method = "containment",
type = 3,
test.statistic = "F",
contr_sum = TRUE
)
anova(
copios.nitrif,
method = "nlme",
type = 3,
test.statistic = "F",
contr_sum = TRUE
)
Anova.glmmTMB(copios.nitrif)
Anova.glmmTMB(
copios.nitrif,
type = 3,
test.statistic = "F",
component = "cond",
)
packageVersion(glmmTMB)
packageVersion('glmmTMB')
install.packages("glmmTMB", version = "1.0.1")
install.packages("glmmTMB", version = "1.0.1")
packageVersion('glmmTMB')
