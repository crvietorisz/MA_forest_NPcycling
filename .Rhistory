abline(0,1)
# create a dataframe that we can use to interpret results
cp.dat <- cbind(Nitr_sig_leaps$size,
abs(Nitr_sig_leaps$Cp-(Nitr_sig_leaps$size)),
Nitr_sig_leaps$which)
rownames(cp.dat) <- 1:length(Nitr_sig_leaps$size)                 # add rownames
colnames(cp.dat)[1:2] <- c("N.p","Cp-p")                      # add colnames for p, Cp-p-1
colnames(cp.dat)[3:ncol(cp.dat)] <- Nitr_sig_leaps_names
# pick the model(s) where the difference between p and Cp is the smallest
cp3 <- cp.dat[cp.dat[,"N.p"]==3,]
result <- lapply(1:nrow(cp3), function(i) {
row_data <- cp3[i, ]
col_names <- names(row_data)[row_data == 1]
new_df <- data.frame(matrix(col_names, nrow = 1, ncol = 2)) #change ncol to the number of predictors included in each model
names(new_df) <- paste0("Column", 1:ncol(new_df))
new_df
})
# create empty matrix to hold AIC values
nitr_cp3_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(nitr_cp3_aic_matrix) <- "CP3 AIC"
# run an lmer model with each variable combination and input the AICs into the matrix
for (x in 1:length(result)) {
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
}
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
summary(model)
View(cp3)
Nitr.lmer.1 <- lmer(log(Nitrification +0.01) ~ Copiotroph_abundance + total_basal + (1|Site), data = nitr_data)
summary(Nitr.lmer.1)
MuMIn::r.squaredGLMM(Nitr.lmer.1) #R2m = 0.55 - this is the amount of variance explained by predictor variables by themselves (excluding the random effect)
AIC(Nitr.lmer.1) # 69
Nitr.lmer.1 <- lmer(log(Nitrification +0.01) ~ Copiotroph_abundance + total_basal + (1|Site), data = nitr_data)
summary(Nitr.lmer.1)
anova(Nitr.lmer.1)
confint(Nitr.lmer.1, 'Copiotroph_abundance', level = 0.95)
confint(Nitr.lmer.1, 'total_basal', level = 0.95)
Pmin.lm1 <- lm(PO4_release ~ bac_pmin_neg_module_abundance + Mg_litterfall + Mo_litterfall, data = pmin_data)
# read in data
pmin_data <- read.csv("Data/Transect aggregated/pmin_data_transect_12Sep24.csv", row.names=1)
pmin_data$Site <- c(rep("HF1",4), rep("HF2",4), rep("HF3",4), rep("US1",4), rep("US2",4), rep("US3",4))
# select out input predictors for model selection
pmin_sig_preds <- pmin_data[c('PO4_release', 'hw_floor_litter', 'pine_basal', 'bac_pmin_neg_module_abundance', 'bac_copy_number', 'soil_temp2022', 'B_litterfall', 'Fe_litterfall', 'Mg_litterfall', 'Mo_litterfall')]
# format for input into leaps
pmin_sig_preds_leaps <- na.omit(pmin_sig_preds)
pmin_sig_leaps_names <- colnames(pmin_sig_preds_leaps[2:ncol(pmin_sig_preds_leaps)]) #change this range to the size of your input dataframe, minus your response variable
# Use the leaps package to test all subsets of our data using Mallow's Cp as our selection criteria
pmin_sig_leaps <- leaps(x=pmin_sig_preds_leaps[c(2:ncol(pmin_sig_preds_leaps))], y=pmin_data$PO4_release, method="Cp")
#plot all possible models by the number of parameters vs. the Cp score
plot(pmin_sig_leaps$size,pmin_sig_leaps$Cp,
xlab="Number of Parameters",
ylab="Cp",pch=16,col="blue")
abline(0,1)
# create a dataframe that we can use to interpret results
cp.dat <- cbind(pmin_sig_leaps$size,
abs(pmin_sig_leaps$Cp-(pmin_sig_leaps$size)),
pmin_sig_leaps$which)
rownames(cp.dat) <- 1:length(pmin_sig_leaps$size)                 # add rownames
colnames(cp.dat)[1:2] <- c("N.p","Cp-p")                      # add colnames for p, Cp-p-1
colnames(cp.dat)[3:ncol(cp.dat)] <- pmin_sig_leaps_names
# pick the model(s) where the difference between p and Cp is the smallest
cp4 <- as.data.frame(cp.dat[cp.dat[,"N.p"]==4,])
cp5 <- as.data.frame(cp.dat[cp.dat[,"N.p"]==5,])
#### CP4 ####
# create lists of variables in each model combination
result <- lapply(1:nrow(cp4), function(i) {
row_data <- cp4[i, ]
col_names <- names(row_data)[row_data == 1]
new_df <- data.frame(matrix(col_names, nrow = 1, ncol = 3)) #change ncol to the number of predictors included in each model
names(new_df) <- paste0("Column", 1:3)
new_df
})
# create empty matrix to hold AIC values
pmin_cp4_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(pmin_cp4_aic_matrix) <- "CP4 AIC"
# run an lm model with each variable combination and input the AICs into the matrix
# note: not including site as a random effect here because it does not explain any variation when included
for (x in 1:length(result)) {
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
}
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
summary(model)
#### CP5 ####
result <- lapply(1:nrow(cp5), function(i) {
row_data <- cp5[i, ]
col_names <- names(row_data)[row_data == 1]
new_df <- data.frame(matrix(col_names, nrow = 1, ncol = 4)) #change ncol to the number of predictors included in each model
names(new_df) <- paste0("Column", 1:4)
new_df
})
pmin_cp5_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(pmin_cp5_aic_matrix) <- "CP5 AIC"
for (x in 1:length(result)) {
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp5_aic_matrix[x,1] <- AIC(model)
}
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 7
summary(model)
Pmin.lm1 <- lm(PO4_release ~ bac_pmin_neg_module_abundance + Mg_litterfall + Mo_litterfall, data = pmin_data)
summary(Pmin.lm1)
AIC(Pmin.lm1) #-110
anova(Pmin.lm1)
# create lists of variables in each model combination
result <- lapply(1:nrow(cp4), function(i) {
row_data <- cp4[i, ]
col_names <- names(row_data)[row_data == 1]
new_df <- data.frame(matrix(col_names, nrow = 1, ncol = 3)) #change ncol to the number of predictors included in each model
names(new_df) <- paste0("Column", 1:3)
new_df
})
# create empty matrix to hold AIC values
pmin_cp4_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(pmin_cp4_aic_matrix) <- "CP4 AIC"
# run an lm model with each variable combination and input the AICs into the matrix
# note: not including site as a random effect here because it does not explain any variation when included
for (x in 1:length(result)) {
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
}
View(result_df)
View(cp4)
View(pmin_cp4_aic_matrix)
View(pmin_cp5_aic_matrix)
View(nitr_cp3_aic_matrix)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 6
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
result <- lapply(1:nrow(cp3), function(i) {
row_data <- cp3[i, ]
col_names <- names(row_data)[row_data == 1]
new_df <- data.frame(matrix(col_names, nrow = 1, ncol = 2)) #change ncol to the number of predictors included in each model
names(new_df) <- paste0("Column", 1:ncol(new_df))
new_df
})
# create empty matrix to hold AIC values
nitr_cp3_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(nitr_cp3_aic_matrix) <- "CP3 AIC"
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 6
summary(model)
nitr_cp3_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(nitr_cp3_aic_matrix) <- "CP3 AIC"
# run an lmer model with each variable combination and input the AICs into the matrix
for (x in 1:length(result)) {
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
}
View(nitr_cp3_aic_matrix)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 4
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
summary(model)
View(cp3)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 10
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 9
summary(model)
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 5
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 7
summary(model)
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("log(Nitrification +0.01)", "~", paste(row, collapse = " + "), "+ (1|Site)")) # include Site as a random effect
model <- lmer(formula, data = nitr_data)
nitr_cp3_aic_matrix[x,1] <- AIC(model)
summary(model)
# read in data
pmin_data <- read.csv("Data/Transect aggregated/pmin_data_transect_12Sep24.csv", row.names=1)
pmin_data$Site <- c(rep("HF1",4), rep("HF2",4), rep("HF3",4), rep("US1",4), rep("US2",4), rep("US3",4))
# select out input predictors for model selection
pmin_sig_preds <- pmin_data[c('PO4_release', 'hw_floor_litter', 'pine_basal', 'bac_pmin_neg_module_abundance', 'bac_copy_number', 'soil_temp2022', 'B_litterfall', 'Fe_litterfall', 'Mg_litterfall', 'Mo_litterfall')]
# format for input into leaps
pmin_sig_preds_leaps <- na.omit(pmin_sig_preds)
pmin_sig_leaps_names <- colnames(pmin_sig_preds_leaps[2:ncol(pmin_sig_preds_leaps)]) #change this range to the size of your input dataframe, minus your response variable
# Use the leaps package to test all subsets of our data using Mallow's Cp as our selection criteria
pmin_sig_leaps <- leaps(x=pmin_sig_preds_leaps[c(2:ncol(pmin_sig_preds_leaps))], y=pmin_data$PO4_release, method="Cp")
#plot all possible models by the number of parameters vs. the Cp score
plot(pmin_sig_leaps$size,pmin_sig_leaps$Cp,
xlab="Number of Parameters",
ylab="Cp",pch=16,col="blue")
abline(0,1)
# create a dataframe that we can use to interpret results
cp.dat <- cbind(pmin_sig_leaps$size,
abs(pmin_sig_leaps$Cp-(pmin_sig_leaps$size)),
pmin_sig_leaps$which)
rownames(cp.dat) <- 1:length(pmin_sig_leaps$size)                 # add rownames
colnames(cp.dat)[1:2] <- c("N.p","Cp-p")                      # add colnames for p, Cp-p-1
colnames(cp.dat)[3:ncol(cp.dat)] <- pmin_sig_leaps_names
# pick the model(s) where the difference between p and Cp is the smallest
cp4 <- as.data.frame(cp.dat[cp.dat[,"N.p"]==4,])
cp5 <- as.data.frame(cp.dat[cp.dat[,"N.p"]==5,])
#### CP4 ####
# create lists of variables in each model combination
result <- lapply(1:nrow(cp4), function(i) {
row_data <- cp4[i, ]
col_names <- names(row_data)[row_data == 1]
new_df <- data.frame(matrix(col_names, nrow = 1, ncol = 3)) #change ncol to the number of predictors included in each model
names(new_df) <- paste0("Column", 1:3)
new_df
})
# create empty matrix to hold AIC values
pmin_cp4_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(pmin_cp4_aic_matrix) <- "CP4 AIC"
# run an lm model with each variable combination and input the AICs into the matrix
# note: not including site as a random effect here because it does not explain any variation when included
for (x in 1:length(result)) {
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
}
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
summary(model)
#### CP5 ####
result <- lapply(1:nrow(cp5), function(i) {
row_data <- cp5[i, ]
col_names <- names(row_data)[row_data == 1]
new_df <- data.frame(matrix(col_names, nrow = 1, ncol = 4)) #change ncol to the number of predictors included in each model
names(new_df) <- paste0("Column", 1:4)
new_df
})
pmin_cp5_aic_matrix <- matrix(nrow = 10, ncol =1)
colnames(pmin_cp5_aic_matrix) <- "CP5 AIC"
for (x in 1:length(result)) {
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp5_aic_matrix[x,1] <- AIC(model)
}
View(pmin_cp4_aic_matrix)
View(pmin_cp5_aic_matrix)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp5_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 2
summary(model)
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp5_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 3
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp5_aic_matrix[x,1] <- AIC(model)
summary(model)
View(cp5)
View(cp4)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 2
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 3
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
summary(model)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
summary(model)
Pmin.lm1 <- lm(PO4_release ~ bac_pmin_neg_module_abundance + Mg_litterfall + Mo_litterfall, data = pmin_data)
summary(Pmin.lm1)
#set x equal to the lowest AIC row then run through the code within the for loop to determine which variables are included in that combination
x <- 1
result_df <- as.data.frame(result[x])
row <- as.list(result_df[1,])
formula <- as.formula(paste("PO4_release", "~", paste(row, collapse = " + ")))
model <- lm(formula, data = pmin_data)
pmin_cp4_aic_matrix[x,1] <- AIC(model)
summary(model)
Pmin.lm1 <- lm(PO4_release ~ bac_pmin_neg_module_abundance + Mg_litterfall + Mo_litterfall, data = pmin_data)
summary(Pmin.lm1)
AIC(Pmin.lm1) #-110
anova(Pmin.lm1)
Pmin.lm1 <- lm(PO4_release ~ bac_pmin_neg_module_abundance + Mg_litterfall + Mo_litterfall, data = pmin_data)
summary(Pmin.lm1)
anova(Pmin.lm1)
Nitr.lmer.1 <- lmer(log(Nitrification +0.01) ~ Copiotroph_abundance + total_basal + (1|Site), data = nitr_data)
summary(Nitr.lmer.1)
MuMIn::r.squaredGLMM(Nitr.lmer.1) #R2m = 0.56 - this is the amount of variance explained by predictor variables by themselves (excluding the random effect)
AIC(Nitr.lmer.1) # 80
anova(Nitr.lmer.1)
Ammon.lmer.1 <- lmer(Ammonification ~ soil_moisture + med_dist_expl + (1|Site), data = amm_data)
anova(Ammon.lmer.1)
confint(Pmin.lm1, 'bac_pmin_neg_module_abundance', level = 0.95)
confint(Pmin.lm1, 'Mg_litterfall', level = 0.95)
confint(Pmin.lm1, 'Mo_litterfall', level = 0.95)
# read in full data
sub_dist <- read.csv("Data/MA_forest_NPcycling_fullData.csv", row.names=1)
Ammon.lmer.1 <- lmer(sqrt(Ammonification) ~ edaphic_PC1 + ECM_abundance + (1|Site), data = sub_dist)
anova(Ammon.lmer.1)
Ammon.lmer.2 <- lmer(sqrt(Ammonification) ~ edaphic_PC1 + fun_amm_pos_module_abundance + (1|Site), data = sub_dist)
anova(Ammon.lmer.2)
Pmin.lm1 <- lm(PO4_release ~ no_pine_saplings + soil_temp2022 + CPhydrolase_ECbac_abund + Poxidoreductase_ECfun_abund, data = sub_dist)
anova(Pmin.lm1)
# ITS_copy_number is not significant, so removing that parameter
mod.final2 <- glm((Nitrification+1) ~  litter_depth + Ferns + med_dist_expl + Copiotroph_abundance + bac_shannon,
data = sub_dist,
family = Gamma(link = "log"))
anova(mod.final2)
library(lme4)
library(MuMIn)
library(ggplot2)
library(tidyverse)
library(glmmTMB)
library(DHARMa)
library(lmerTest)
copios.nitrif.plot <- ggplot(sub_dist, aes(x = Copiotroph_abundance, y = log(Nitrification+1))) +
geom_point() +
geom_abline(slope=7.688, intercept=-1.74) +
labs(x = "Copiotroph abundance", y = "log(Nitrification+0.01)")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x = element_text(size=13),axis.title.y = element_text(size=13), axis.text=element_text(size=12))
copios.nitrif.plot
### for manuscript
copios.nitrif.plot <- ggplot(sub_dist, aes(x = Copiotroph_abundance, y = log(Nitrification+1))) +
geom_point() +
geom_abline(slope=7.688, intercept=-1.74, lwd = 1) +
labs(x = "", y = "")+
theme(legend.position="none", panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text=element_text(size=18))
copios.nitrif.plot
ggsave("Copios_nitrif_noaxes.png", path = "/Users/moniquegagnon/Desktop/BU/PhD/White pine/Figures/Manuscript figs/current figs/no_axes", width = 3.8, height = 3.5, dpi=300)
ggsave("Copios_nitrif_noaxes.png", path = "/Users/crvietorisz/Desktop/BU/PhD/White pine/Figures/Manuscript figs/current figs/no_axes", width = 3.8, height = 3.5, dpi=300)
### for manuscript
nitrifiers.nitrif.plot <- ggplot(sub_dist, aes(x = Nitrifier_abundance, y = log(Nitrification+1))) +
geom_point() +
geom_abline(slope=42.07165, intercept=0.52033, lwd=1) +
labs(x = "", y = "")+
scale_x_continuous(breaks=c(0, 0.01, 0.02), limits = c(0,0.021)) +
scale_y_continuous(breaks=c(0, 0.5, 1, 2)) +
theme(legend.position="none", panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text=element_text(size=18))
nitrifiers.nitrif.plot
ggsave("Nitrifiers_nitrif_noaxes.png", path = "/Users/crvietorisz/Desktop/BU/PhD/White pine/Figures/Manuscript figs/current figs/no_axes", width = 3.7, height = 3.5, dpi=300)
### for manuscript
bacmodule.nitrif.plot <- ggplot(sub_dist, aes(x = bac_nitr_pos_module_abundance, y = log(Nitrification+1))) +
geom_point() +
geom_abline(slope=4.5707, intercept=-2.2608, lwd=1) +
labs(x = "", y = "")+
xlim(0.43, 0.71)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x = element_text(size=13),axis.title.y = element_text(size=13), axis.text=element_text(size=18))
### for manuscript
bacmodule.nitrif.plot <- ggplot(sub_dist, aes(x = bac_nitr_pos_module_abundance, y = log(Nitrification+1))) +
geom_point() +
geom_abline(slope=4.5707, intercept=-2.2608, lwd=1) +
labs(x = "", y = "")+
xlim(0.43, 0.71)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x = element_text(size=13),axis.title.y = element_text(size=13), axis.text=element_text(size=18))
bacmodule.nitrif.plot
### for manuscript
bacmodule.nitrif.plot <- ggplot(sub_dist, aes(x = bac_nitr_pos_module_abundance, y = log(Nitrification+1))) +
geom_point() +
geom_abline(slope=4.5707, intercept=-2.2608, lwd=1) +
labs(x = "", y = "")+
#xlim(0.43, 0.71)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x = element_text(size=13),axis.title.y = element_text(size=13), axis.text=element_text(size=18))
bacmodule.nitrif.plot
### for manuscript
bacmodule.nitrif.plot <- ggplot(sub_dist, aes(x = bac_nitr_pos_module_abundance, y = log(Nitrification+1))) +
geom_point() +
geom_abline(slope=4.5707, intercept=-2.2608, lwd=1) +
labs(x = "", y = "")+
xlim(0.43, 0.71)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x = element_text(size=13),axis.title.y = element_text(size=13), axis.text=element_text(size=18))
bacmodule.nitrif.plot
ggsave("Bac.module_nitrif_noaxes.png", path = "/Users/crvietorisz/Desktop/BU/PhD/White pine/Figures/Manuscript figs/current figs/no_axes", width = 3.8, height = 3.5, dpi=300)
# Stats
copios.nitrif <- glm((Nitrification+1) ~ Copiotroph_abundance, # when running a glmer with site as an error term, the error term did not explain any variance
data = sub_dist,
family = Gamma(link = "log"))
summary(copios.nitrif)
anova(copios.nitrif) # p = 9e-11, F = 50.3, numDF - 1, denDF = 124
# Stats
bacmodule.nitrif <- glm((Nitrification+1) ~ bac_nitr_pos_module_abundance,
data = sub_dist,
family = Gamma(link = "log"))
summary(bacmodule.nitrif)
anova(bacmodule.nitrif) # p = 2e-06, F = 25.1, DFnum = 1, DFden = 124
MuMIn::r.squaredGLMM(bacmodule.nitrif) # R2m (lognormal) = 0.15
# Stats
nitrifiers.nitrif <- glm((Nitrification+1) ~ Nitrifier_abundance,
data = sub_dist,
family = Gamma(link = "log"))
summary(nitrifiers.nitrif)
anova(nitrifiers.nitrif) # p = 0.002, F = 9.8, numDF = 1, denDF = 124
# Stats
bacmodule.nitrif <- glm((Nitrification+1) ~ bac_nitr_pos_module_abundance,
data = sub_dist,
family = Gamma(link = "log"))
summary(bacmodule.nitrif)
anova(bacmodule.nitrif) # p = 2e-06, F = 25.1, DFnum = 1, DFden = 124
anova(nitrifiers.nitrif) # p = 0.002, F = 9.8, numDF = 1, denDF = 124
MuMIn::r.squaredGLMM(nitrifiers.nitrif) # R2m (lognormal) = 0.09
# Stats
copios.nitrif <- glm((Nitrification+1) ~ Copiotroph_abundance, # when running a glmer with site as an error term, the error term did not explain any variance
data = sub_dist,
family = Gamma(link = "log"))
summary(copios.nitrif)
anova(copios.nitrif) # p = 9e-11, F = 50.3, numDF - 1, denDF = 124
MuMIn::r.squaredGLMM(copios.nitrif) # R2m (lognormal) = 0.32
# Stats
EMF.amm <- lmer(sqrt(Ammonification) ~ ECM_abundance + (1|Site), data = sub_dist)
summary(EMF.amm)
anova(EMF.amm, ddf = "Satterthwaite") # p = 0.0004, F = 13.3, numDF = 1, denDF = 109
MuMIn::r.squaredGLMM(EMF.amm) # R2m = 0.11
# Stats
funICM.amm <- lmer(sqrt(Ammonification) ~ fun_amm_pos_module_abundance + (1|Site), data = sub_dist)
summary(funICM.amm)
anova(funICM.amm, ddf = "Satterthwaite") # p = 0.0006, F = 12.5, numDF = 1, denDF = 109
MuMIn::r.squaredGLMM(funICM.amm) #get Rsquared value - R2c is the conditional R2 and is variance explained by entire model
# Stats
Poxidored.pmin <- lmer(PO4_release ~ Poxidoreductase_ECfun_abund + (1|Site), data = sub_dist)
summary(Poxidored.pmin)
anova(Poxidored.pmin, ddf = "Satterthwaite") # p = 0.002, F = 10.3, numDF = 1, denDF = 96
MuMIn::r.squaredGLMM(Poxidored.pmin) #R2m = 0.08
